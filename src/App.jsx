import { useState } from "react"; //Importamos la funci√≥n de React que se llama useState, que se usa en los componentes funcionales como este, para guardar y actualizar valores din√°micos: input, resultados, etc...
import "./App.css"; //para importar el estilo del archivo css

//Esta es la definici√≥n del componente App y la creaci√≥n de estados con useState
function App() { //define el componente principal (los componentes son funciones que devuelven interfaz de usuario: HTML + l√≥gica)

  const [monto, setMonto] = useState(""); //Aqu√≠ se crea una variable de estado que se llama monto. Guarda lo que el usuario escriba en el input. setMonto cambia el valor de monto. "" es el valor inicial (vac√≠o)
  const [monedaOrigen, setMonedaOrigen] = useState("USD"); //guarda la moneda seleccionada de origen
  const [monedaDestino, setMonedaDestino] = useState("EUR"); //guarda la moneda de destino
  const [resultado, setResultado] = useState(null); //guarda el resultado final. null = a√∫n no se ha hecho la conversi√≥n

  // En resumen:
  // monto ‚Üí n√∫mero que escribe el usuario
  // monedaOrigen ‚Üí la moneda de origen
  // monedaDestino ‚Üí la moneda destino
  // resultado ‚Üí el valor convertido (resultado final)



// manejarSubmit se ejecuta cuando el usuario hace clic en el bot√≥n "Convertir"
 const manejarSubmit = async (e) => {
  e.preventDefault(); // evita que se recargue la p√°gina al enviarse el formulario. 
  // Esto debemos usarlo en REACT para que no se pierdan los datos que escribe el usuario.
  // para que no se reinicie el componente como si se hubiera abierto de nuevo, para que no se interrumpa el flujo de la app
  // Esto: e.preventDefault(); le dice al navegador que no recargue la p√°gina, 
  // as√≠ podemos controlar validaciones, llamadas a apis, mostrar resultados en pantalla sin que se pierda nada.
  if (!monto || isNaN(monto)) { // esta l√≠nea valida que el valor que el usuario escribi√≥ sea un n√∫mero v√°lido.
    // !monto se asegura de que no est√© vac√≠o e isNaN(monto) revisa si no es un n√∫mero. 
    // Si cualquiera de estas dos condiciones es true, se mostrar√° la siguiente alerta:
    alert("Por favor ingresa un monto v√°lido");
    return;
  }
  // Dentro del bloque try/catch es donde vamos a conectar con la API real de divisas y se maneja la respuesta
  // Estructura usada en JS para probar algo que podr√≠a fallar
  // Si todo sale bien: ejecuta el bloque de TRY
  // Si algo sale mal: ejecuta el bloque CATCH y se muestra un error sin que se rompa la app
  try {
    // Aqu√≠ se hace una llamada HTTP a la API nueva con clave
    // fetch(...) es una funci√≥n para llamar a APIs desde el navegador
    // await le dice a JavaScript: "espera a que termine esta llamada antes de continuar"
    const res = await
 fetch(`https://v6.exchangerate-api.com/v6/eb248bea54c49539555528d5/latest/${monedaOrigen
 }`);
    // Esta siguiente l√≠nea convierte la respuesta de la API (que viene en formato JSON) a un objeto de JS
    const data = await res.json();
    console.log("Respuesta de la nueva API:", data); 
    // Comprobamos si la API devuelve una tasa de conversi√≥n v√°lida
    if (data.conversion_rates && data.conversion_rates[monedaDestino]) {
      const tasa = data.conversion_rates[monedaDestino];
      const resultadoFinal = monto * tasa;
      setResultado(resultadoFinal.toFixed(2)); // redondeamos a 2 decimales
    } else {
      alert("No se pudo obtener la tasa de conversi√≥n.");
      setResultado(null);
    }
  } catch (error) {
    console.error("Error al convertir:", error);
    alert("Hubo un error al conectar con la API.");
  }
  // Esto se imprime en la consola del navegador, es una forma de depurar y ver si todo est√° funcionando antes de usar la API
  console.log(`Convertir ${monto} de ${monedaOrigen} a ${monedaDestino}`);
 };


  // Este es el RETORNO del componente App, que define todo lo que se muestra visualmente en la app.
  // return en un componente de React indica qu√© va a renderizarse (mostrarse) en la pantalla.
  // Aqu√≠ estamos devolviendo una interfaz JSX para el conversor.
  // JSX = HTML dentro de JS. React lo transforma en c√≥digo real para mostrarlo en el navegador.
  return (
    <div className="contenedor">
      <h1>üí± Conversor de Divisas</h1>

      <form onSubmit={manejarSubmit}>
        <input
          type="number"
          placeholder="Monto a convertir"
          value={monto}
          onChange={(e) => setMonto(e.target.value)}
        />

        <select value={monedaOrigen} onChange={(e) => setMonedaOrigen(e.target.value)}>
          <option value="USD">USD</option>
          <option value="EUR">EUR</option>
          <option value="CLP">CLP</option>
          <option value="MXN">MXN</option>
        </select>

        <select value={monedaDestino} onChange={(e) => setMonedaDestino(e.target.value)}>
          <option value="USD">USD</option>
          <option value="EUR">EUR</option>
          <option value="CLP">CLP</option>
          <option value="MXN">MXN</option>
        </select>

        <button type="submit">Convertir</button>
      </form>

      {resultado && (
        <div className="resultado">
          <p>{monto} {monedaOrigen} = <strong>{resultado} {monedaDestino}</strong></p>
        </div>
      )}
    </div>
  );
}

// Con todo este c√≥digo conseguimos una interfaz completa que:
  // Recibe un monto a convertir
  // Permite elegir monedas
  // Muestra el resultado
  // Controla todo con React

export default App;
